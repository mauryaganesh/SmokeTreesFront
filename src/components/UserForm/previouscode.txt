import { Component } from "react";
import "./index.css";

class UserForm extends Component {
  state = {
    name: "",
    address: "",
    message: "",
    users: [],
  };

  componentDidMount() {
    this.fetchUsers();
  }

  fetchUsers = async () => {
    const apiUrl = "http://localhost:5000/users";
    const response = await fetch(apiUrl);
    const usersData = await response.json();

    this.setState({ users: usersData });
  };

  handleFormSubmit = async (event) => {
    event.preventDefault();

    const { name, address } = this.state;
    const apiUrl = "http://localhost:5000/submit";
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, address }),
    });

    const result = await response.json();

    // Update the message and reset the form fields
    this.setState({
      message: result.message,
      name: "",
      address: "",
    });

    // Fetch the updated list of users after successful submission
    this.fetchUsers();
  };

  handleInputChange = (event) => {
    const { name, value } = event.target;
    this.setState({ [name]: value });
  };

  render() {
    const { name, address, message, users } = this.state;

    return (
      <div className="app-container">
        <h1 className="app-title">User Registration</h1>

        <form onSubmit={this.handleFormSubmit} className="form-container">
          <div className="form-group">
            <label htmlFor="name" className="label">
              Enter Your Name:
            </label>
            <input
              id="name"
              type="text"
              name="name"
              value={name}
              onChange={this.handleInputChange}
              className="input-field"
            />
          </div>
          <div className="form-group">
            <label htmlFor="address" className="label">
              Enter Your Address:
            </label>
            <input
              id="address"
              type="text"
              name="address"
              value={address}
              onChange={this.handleInputChange}
              className="input-field"
            />
          </div>
          <button type="submit" className="submit-btn">
            Submit
          </button>
        </form>

        {message && <p className="message">{message}</p>}

        <h2 className="section-title">Registered Users</h2>
        <table className="users-table">
          <thead>
            <tr>
              <th className="table-header">Serial No.</th>
              <th className="table-header">Username</th>
              <th className="table-header">Address</th>
            </tr>
          </thead>
          <tbody>
            {users.map((user, index) => (
              <tr key={user.id} className="table-row">
                <td className="table-data">{index + 1}</td>
                <td className="table-data">{user.name}</td>
                <td className="table-data">{user.address}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }
}

export default UserForm;


.app-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-color: #f9f9f9;
  padding: 20px;
}

.app-title {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  font-size: 36px;
  font-weight: 700;
  color: #333;
  text-align: center;
  margin-bottom: 30px;
}

.section-title {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  font-size: 28px;
  color: #4caf50;
  margin: 20px 0;
}

.form-container {
  width: 100%;
  max-width: 600px;
  background-color: white;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 40px;
}

.form-group {
  margin-bottom: 20px;
}

.label {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  font-weight: 600;
  margin-bottom: 8px;
  display: block;
  color: #333;
}

.input-field {
  padding: 10px;
  width: 100%;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  transition: border-color 0.3s ease;
}

.input-field:focus {
  border-color: #4caf50;
  outline: none;
}

.submit-btn {
  padding: 12px 20px;
  font-size: 16px;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  width: 100%;
  margin-top: 10px;
}

.submit-btn:hover {
  background-color: #45a049;
}

.message {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  color: #4caf50;
  font-weight: bold;
  margin-top: 15px;
  text-align: center;
}

.users-table {
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
  border-collapse: collapse;
  background-color: white;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.table-header {
  background-color: #4caf50;
  color: white;
  padding: 12px;
  font-size: 18px;
  text-align: left;
  font-weight: bold;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

.table-data {
  padding: 12px;
  font-size: 16px;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  color: #333;
}

.table-row:nth-child(even) {
  background-color: #f2f2f2;
}

.table-row:hover {
  background-color: #ddd;
}

th,
td {
  text-align: left;
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

@media screen and (max-width: 768px) {
  .form-container,
  .users-table {
    width: 90%;
  }
}

@media screen and (max-width: 480px) {
  .form-container {
    padding: 20px;
  }

  .submit-btn {
    padding: 14px;
  }

  .users-table {
    width: 100%;
  }

  th,
  td {
    font-size: 14px;
  }
}

/* .input-field {
  padding: 8px;
  width: 100%;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
} */

.error-field {
  border-color: red;
}

.error-message {
  color: red;
  font-size: 14px;
  margin-top: 5px;
}




import { Component } from "react";
import "./index.css";

class UserForm extends Component {
  state = {
    name: "",
    address: "",
    message: "",
    users: [],
    showNameError: false,
    showAddressError: false,
    isFormSubmitted: false,
  };

  componentDidMount() {
    this.fetchUsers();
  }

  fetchUsers = async () => {
    const apiUrl = "http://localhost:5000/users";
    const response = await fetch(apiUrl);
    const usersData = await response.json();

    this.setState({ users: usersData });
  };

  validateName = () => {
    const { name } = this.state;
    return name !== "";
  };

  validateAddress = () => {
    const { address } = this.state;
    return address !== "";
  };

  handleFormSubmit = async (event) => {
    event.preventDefault();

    const isValidName = this.validateName();
    const isValidAddress = this.validateAddress();

    if (isValidName && isValidAddress) {
      const { name, address } = this.state;
      const apiUrl = "http://localhost:5000/register";
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, address }),
      });

      const result = await response.json();

      // Update the message and reset the form fields
      this.setState({
        message: result.message,
        name: "",
        address: "",
        showNameError: false,
        showAddressError: false,
        isFormSubmitted: true,
      });

      // Fetch the updated list of users after successful submission
      this.fetchUsers();
    } else {
      this.setState({
        showNameError: !isValidName,
        showAddressError: !isValidAddress,
      });
    }
  };

  handleInputChange = (event) => {
    const { name, value } = event.target;
    this.setState({ [name]: value });
  };

  onBlurName = () => {
    const isValidName = this.validateName();

    this.setState({ showNameError: !isValidName });
  };

  renderNameField = () => {
    const { name, showNameError } = this.state;

    const className = showNameError ? "input-field error-field" : "input-field";

    return (
      <div className="form-group">
        <label htmlFor="name">Enter Your Name:</label>
        <input
          id="name"
          type="text"
          name="name"
          className={className}
          value={name}
          onChange={this.handleInputChange}
          // onBlur={() => this.setState({ showNameError: !this.validateName() })}
          onBlur={this.onBlurName}
          placeholder="Enter your name"
        />
        {showNameError && <p className="error-message">Required</p>}
      </div>
    );
  };

  onBlurAddress = () => {
    const isValidAddress = this.validateAddress();

    this.setState({ showAddressError: !isValidAddress });
  };

  renderAddressField = () => {
    const { address, showAddressError } = this.state;

    const className = showAddressError
      ? "input-field error-field"
      : "input-field";

    return (
      <div className="form-group">
        <label htmlFor="address">Enter Your Address:</label>
        <input
          id="address"
          type="text"
          name="address"
          className={className}
          value={address}
          onChange={this.handleInputChange}
          // onBlur={() =>
          //   this.setState({ showAddressError: !this.validateAddress() })
          // }
          onBlur={this.onBlurAddress}
          placeholder="Enter your address"
        />
        {showAddressError && <p className="error-message">Required</p>}
      </div>
    );
  };

  render() {
    const { message, users } = this.state;

    return (
      <div className="app-container">
        <h1 className="app-title">User Registration</h1>

        <form onSubmit={this.handleFormSubmit} className="form-container">
          {this.renderNameField()}
          {this.renderAddressField()}
          <button type="submit" className="submit-btn">
            Submit
          </button>
          {message && <p className="message">{message}</p>}
        </form>

        <h2 className="section-title">Registered Users</h2>
        <table className="users-table">
          <thead>
            <tr>
              <th className="table-header">Serial No.</th>
              <th className="table-header">Username</th>
              <th className="table-header">Address</th>
            </tr>
          </thead>
          <tbody>
            {users.map((user, index) => (
              <tr key={user.id} className="table-row">
                <td className="table-data">{index + 1}</td>
                <td className="table-data">{user.name}</td>
                <td className="table-data">{user.address}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }
}

export default UserForm;
